kable_styling(full_width = T)
metricas4 <- bind_rows(metricas_insample4, metricas_outsample4)
# Dummyficamos ANTES de partir la base en train/test
# Creamos las variables edad y años de casados al cuadrado
df <- model.matrix(~ , Affairs)
# Cargamos la librería AER donde está alojada la data
library(pacman)
p_load(AER, tidyverse, caret, MLmetrics, tidymodels, themis)
# Importamos los datos
data("Affairs")
# Codificamos la variable de affairs según el diccionario
diccionario_affairs = c("Nunca", "Una vez", "Dos veces",
"Tres veces", "4 a 10 veces",
"Más de 10 veces")
# realizar pre procesamiento
Affairs$occupation <- factor(Affairs$occupation)
Affairs$education <- factor(Affairs$education)
# Creamos las variables edad y años de casados al cuadrado
df <- model.matrix(~ . + I(age^2) + I(yearsmarried^2) - affairs - 1, Affairs)
View(df)
# Cargamos la librería AER donde está alojada la data
library(pacman)
p_load(AER, tidyverse, caret, MLmetrics, tidymodels, themis)
# Importamos los datos
data("Affairs")
# Codificamos la variable de affairs según el diccionario
diccionario_affairs = c("Nunca", "Una vez", "Dos veces",
"Tres veces", "4 a 10 veces",
"Más de 10 veces")
# codificar variable affairs (número de infidelidades)
Affairs$affairs <- factor(Affairs$affairs,
levels = c(0, 1, 2, 3, 7, 12),
labels = diccionario_affairs)
# crear variable infiel a partir de la variable categorica creada affairs
Affairs$infiel <- Affairs$affairs != "Nunca"
# ver distribucion de la variable a predecir
prop.table(table(Affairs$infiel))
# codificar variable affairs (número de infidelidades)
Affairs$affairs <- factor(Affairs$affairs,
levels = c(0, 1, 2, 3, 7, 12),
labels = diccionario_affairs)
# codificar variable affairs (número de infidelidades)
Affairs$affairs <- factor(Affairs$affairs,
levels = c(0, 1, 2, 3, 7, 12),
labels = diccionario_affairs)
# crear grafico de barras
ggplot(Affairs, aes(x = affairs)) +
geom_bar(fill = "darkblue") +
theme_bw() +
labs(title = "¿Con qué frecuencia tuvo relaciones sexuales extramatrimoniales \n durante el último año?",
x = "",
y = "Frecuencia") +
coord_flip()
ggplot(Affairs, aes(x = affairs)) +
geom_bar(fill = "darkblue") +
theme_bw() +
labs(title = "¿Con qué frecuencia tuvo relaciones sexuales extramatrimoniales \n durante el último año?",
x = "",
y = "Frecuencia") +
coord_flip()
# Importamos los datos
data("Affairs")
# Codificamos la variable de affairs según el diccionario
diccionario_affairs = c("Nunca", "Una vez", "Dos veces",
"Tres veces", "4 a 10 veces",
"Más de 10 veces")
# realizar pre procesamiento
# crear dummys de variables
# hacer variables categorias
# estandarizar variables
# drop variables no significativas, con ruido
#
# codificar variable affairs (número de infidelidades)
Affairs$affairs <- factor(Affairs$affairs,
levels = c(0, 1, 2, 3, 7, 12),
labels = diccionario_affairs)
# crear variable infiel a partir de la variable categorica creada affairs
Affairs$infiel <- Affairs$affairs != "Nunca"
# ver distribucion de la variable a predecir
prop.table(table(Affairs$infiel))
LogLikelihood <- function (y_pred, y_true) {
# Número cercano a cercano para evitar división por cero
eps <- 1e-15
# Si la probabilidad predicha es 0, agregale eps
# Si la probabilidad predicha es 1, restele eps
y_pred <- pmax(pmin(y_pred, 1 - eps), eps)
# Pasamos de booleano a numerico
y_true <- y_true + 0
LogLoss <- sum(y_true * log(y_pred) + (1 - y_true) * log(1 - y_pred))
return(LogLoss)
}
# caso1: fieles
y_hat_fiel <- rep(0,n)
y_hat <- seq(0.001, 0.999, length.out = 100)
# caso infieles: y_true=1
l <- c()
for (i in 1:100) {
li <- LogLikelihood(y_pred = y_hat[i], y_true = 1)
l <- c(l, li)
}
plot_f <- data.frame(y_hat = y_hat, log_likelihood = l)
ggplot(plot_f, aes(x = y_hat, y = log_likelihood)) +
geom_point() +
geom_line() +
geom_vline(xintercept = 1, linetype = "dashed", color = "red") +
theme_bw() +
labs(x = "Valor predicho", y = "Log-verosimilitud")
# Log-verosimilitud cuando se dice que todas las personas son fieles
n <- nrow(Affairs)
y_hat_fieles <- rep(0, n)
l_fieles <- LogLikelihood(y_pred = y_hat_fieles, y_true = Affairs$infiel)
# Log-verosimilitud cuando se dice que todas las personas son fieles
n <- nrow(Affairs)
y_hat_fieles <- rep(0, n)
l_fieles <- LogLikelihood(y_pred = y_hat_fieles, y_true = Affairs$infiel)
# Log-verosimilitud cuando todos son infieles
y_hat_infieles <- rep(1, n)
l_infieles <- LogLikelihood(y_pred = y_hat_infieles, y_true = Affairs$infiel)
# Log-verosimilitud cuando el 75% de las personas es fiel seleccionado al azar
y_hat_fieles75 <- c(rep(0, round(n*0.75, 0)), rep(1, round(n*0.25, 0)))
# Corremos 10000 simulaciones
set.seed(666)
l_fieles75 <- c()
for (i in 1:10000) {
y_hat_fieles75_i <- sample(y_hat_fieles75, n)
l_fieles75_i <- LogLikelihood(y_pred = y_hat_fieles75_i,
y_true = Affairs$infiel)
l_fieles75 <- c(l_fieles75, l_fieles75_i)
}
# Log-verosimilitud cuando el 100% de las predicciones es correcta
l_maximo <- LogLikelihood(y_pred = Affairs$infiel, y_true = Affairs$infiel)
ggplot() +
geom_histogram(aes(x = l_fieles75), fill = "darkblue") + theme_bw() +
geom_vline(aes(xintercept = l_fieles,
color = "100% Fieles"), linetype = "dashed") +
geom_vline(aes(xintercept = l_infieles,
color = "100% Infieles"), linetype = "dashed") +
geom_vline(aes(xintercept = l_maximo,
color = "Máxima Log-verosimilitud"),
linetype = "dashed") +
labs(x = "Log-verosimilitud", y = "Frecuencia") +
scale_color_manual(name = "Escenario",
values = c("100% Infieles" = "red",
"100% Fieles" = "blue",
"Máxima Log-verosimilitud" = "green"))
# Pre-procesamiento de datos
Affairs$occupation <- factor(Affairs$occupation)
Affairs$education <- factor(Affairs$education)
View(Affairs)
View(Affairs)
# Dummyficamos ANTES de partir la base en train/test
# Creamos las variables edad y años de casados al cuadrado
df <- model.matrix(~ . + I(age^2) + I(yearsmarried^2) - affairs - 1, Affairs)
View(df)
View(df)
# dividir la base con variables dummys entre train-set y test-set
smp_size <- floor(0.7*n)
# dividir la base con variables dummys entre train-set y test-set
smp_size <- floor(0.7*n)
set.seed(666)
train_ind <- sample(1:n, size = smp_size)
train <- df[train_ind, ]
test <- df[-train_ind, ]
# dividir la base con variables dummys entre train-set y test-set
smp_size <- floor(0.8*n)
set.seed(666)
train_ind <- sample(1:n, size = smp_size)
train <- df[train_ind, ]
test <- df[-train_ind, ]
# Estandarizamos DESPUÉS de partir la base en train/test
variables_numericas <- c("age", "yearsmarried", "religiousness",
"rating", "I(age^2)", "I(yearsmarried^2)")
variables_numericas
escalador <- preProcess(train[, variables_numericas])
train_s <- train
test_s <- test
train_s[, variables_numericas] <- predict(escalador, train[, variables_numericas])
test_s[, variables_numericas] <- predict(escalador, test[, variables_numericas])
train_s <- data.frame(train_s)
test_s <- data.frame(test_s)
train <- data.frame(train)
test <- data.frame(test)
View(train_s)
train_s$infielTRUE <- as.numeric(train_s$infielTRUE)
modelo1 <- lm(formula = infielTRUE ~ ., data = train_s)
modelo1.summary()
summary(modelo1)
# limpiar ambiente
rm(list=ls())
# instalar paquetes
install.packages("packages")
require("pacman")
## llamar y/o instalar librerias
p_load(tidyverse,rio,skimr,
sf, ## datos espaciales
leaflet, ## visualizaciones
tmaptools, ## geocodificar
ggsn, ## map scale bar
osmdata,dplyr) ## packages with census data
# set wd
setwd("C:/Users/Diego/OneDrive/Documents/GitHub/BD-ML---PS3/scripts/diego/data")
# cargar bases de entrenamiento y prueba
train <- readRDS("train.Rds")
test <- readRDS("test.Rds")
# variables disponibles
available_features()%>%head(20)
# keys disponibles
available_tags("amenity")
## obtener la caja de coordenada que contiene el polígono de Cali
opq(bbox = getbb("Cali Colombia"))
amenities <- available_tags("amenity")
#Creamos una lista con los ammenities que a priori consideramos más importantes
lista_amenities <- c("bank","restaurant", "bus_station", "police", "bank", "cafe", "casino", "childcare", "cinema",
"clinic", "college",  "bicycle_parking", "community_centre", "conference_centre", "dentist", "doctors",
"events_venue", "fast_food", "hospital",
"kindergarten", "library", "love_hotel", "marketplace", "monastery",
"parking", "pharmacy", "place_of_worship",  "post_office",
"pub", "recycling", "shelter", "social_facility",
"theatre", "veterinary", "school", "university", "arts_centre")
#El loop crea un objeto osm para cada amenitie y extrae los simple features
for (amenitie in lista_amenities[1:2]) {
#Crear objetos osm
#assign(paste("osm", amenitie, sep = "_"), opq(bbox = getbb("Cali Colombia")) %>%
#        add_osm_feature(key="amenity" , value= amenitie))
## extraer Simple Features Collection (creando objetos sf)
#assign(paste("osm", amenitie, "sf", sep = "_"), opq(bbox = getbb("Cali Colombia")) %>%
#        add_osm_feature(key="amenity" , value= amenitie) %>% osmdata_sf())
#assign(paste("osm", amenitie, "sf", sep = "_"), opq(bbox = getbb("Cali Colombia")) %>%
#         add_osm_feature(key="amenity" , value= amenitie) %>% osmdata_sf() %>%
#         .$osm_polygons)
assign(paste("osm", amenitie,"Bogota" ,"sf", sep = "_"), opq(bbox = getbb("Bogotá Colombia")) %>%
add_osm_feature(key="amenity" , value= amenitie) %>% osmdata_sf() %>%
.$osm_polygons)
assign(paste("osm", amenitie,"Medellin" ,"sf", sep = "_"), opq(bbox = getbb("Medellín Colombia")) %>%
add_osm_feature(key="amenity" , value= amenitie) %>% osmdata_sf() %>%
.$osm_polygons)
}
## extraer Simple Features Collection
osm_sf = osm %>% osmdata_sf()
## extraer Simple Features Collection
osm_sf = osm %>% osmdata_sf()
# instalar paquetes
install.packages("packages")
require("pacman")
## llamar y/o instalar librerias
p_load(tidyverse,rio,skimr,
sf, ## datos espaciales
leaflet, ## visualizaciones
tmaptools, ## geocodificar
ggsn, ## map scale bar
osmdata,dplyr) ## packages with census data
# set wd
setwd("C:/Users/Diego/OneDrive/Documents/GitHub/BD-ML---PS3/scripts/diego/data")
# cargar bases de entrenamiento y prueba
train <- readRDS("train.Rds")
test <- readRDS("test.Rds")
# variables disponibles
available_features()%>%head(20)
# keys disponibles
available_tags("amenity")
## obtener la caja de coordenada que contiene el polígono de Cali
opq(bbox = getbb("Cali Colombia"))
amenities <- available_tags("amenity")
amenities
#Creamos una lista con los ammenities que a priori consideramos más importantes
lista_amenities <- c("bank","restaurant", "bus_station", "police", "bank", "cafe", "casino", "childcare", "cinema",
"clinic", "college",  "bicycle_parking", "community_centre", "conference_centre", "dentist", "doctors",
"events_venue", "fast_food", "hospital",
"kindergarten", "library", "love_hotel", "marketplace", "monastery",
"parking", "pharmacy", "place_of_worship",  "post_office",
"pub", "recycling", "shelter", "social_facility",
"theatre", "veterinary", "school", "university", "arts_centre")
lista_amenities
#El loop crea un objeto osm para cada amenitie y extrae los simple features
for (amenitie in lista_amenities[1:2]) {
#Crear objetos osm
#assign(paste("osm", amenitie, sep = "_"), opq(bbox = getbb("Cali Colombia")) %>%
#        add_osm_feature(key="amenity" , value= amenitie))
## extraer Simple Features Collection (creando objetos sf)
#assign(paste("osm", amenitie, "sf", sep = "_"), opq(bbox = getbb("Cali Colombia")) %>%
#        add_osm_feature(key="amenity" , value= amenitie) %>% osmdata_sf())
#assign(paste("osm", amenitie, "sf", sep = "_"), opq(bbox = getbb("Cali Colombia")) %>%
#         add_osm_feature(key="amenity" , value= amenitie) %>% osmdata_sf() %>%
#         .$osm_polygons)
assign(paste("osm", amenitie,"Bogota" ,"sf", sep = "_"), opq(bbox = getbb("Bogotá Colombia")) %>%
add_osm_feature(key="amenity" , value= amenitie) %>% osmdata_sf() %>%
.$osm_polygons)
assign(paste("osm", amenitie,"Medellin" ,"sf", sep = "_"), opq(bbox = getbb("Medellín Colombia")) %>%
add_osm_feature(key="amenity" , value= amenitie) %>% osmdata_sf() %>%
.$osm_polygons)
}
## converir DataFrame de train-set a sf
train_house <- st_as_sf(x = train, ## datos
coords=c("lon","lat"), ## coordenadas
crs=4326) ## CRS
class(train_house)
# graficar casas de train-set
leaflet() %>% addTiles() %>% addCircleMarkers(data=train_house[1:10,])
### **5.3 Afine transformations**
st_crs(train_house) == st_crs(parques)
# grafico casas Medellin
houses_medellin <- train_house %>% subset(city= "Medellin")
leaflet() %>% addTiles() %>% addCircles(data=houses_medellin)
# opcion 1: grafico general de casas de Bogota con filtro de variable city
houses_bogota <- train_house %>% subset(city= "Bogotá D.C")
leaflet() %>% addTiles() %>% addCircles(data=houses_bogota)
### Usar la geometría de la ciudad
# crear sf_polygon de la ciudad Bogota
bogota_city <- getbb(place_name = "Bogota",
featuretype = "boundary:administrative",
format_out = "sf_polygon") %>% .$multipolygon
# graficar sf_polygon de la ciudad de Bogota sf_polygon
leaflet() %>% addTiles() %>% addPolygons(data=bogota_city)
## crear interseccion entre x base de casas sf, y sf_polygon
house_chapi <- st_intersection(x = houses_bogota , y = bogota_city)
# graficar sf_polygon de la interseccion entre ambos sf
leaflet() %>% addTiles() %>% addPolygons(data=bogota_city,col="red") %>% addCircles(data=house_chapi)
matrix_dist_arts_centre_bog <- st_distance(x=house_chapi , y=osm_arts_centre_Bogota_sf)
# keys disponibles
available_tags("amenity")
## converir DataFrame de train-set a sf
train_house <- st_as_sf(x = train, ## datos
coords=c("lon","lat"), ## coordenadas
crs=4326) ## CRS
class(train_house)
# graficar casas de train-set
leaflet() %>% addTiles() %>% addCircleMarkers(data=train_house[1:10,])
# grafico casas Medellin
houses_medellin <- train_house %>% subset(city= "Medellin")
leaflet() %>% addTiles() %>% addCircles(data=houses_medellin)
# opcion 1: grafico general de casas de Bogota con filtro de variable city
houses_bogota <- train_house %>% subset(city= "Bogotá D.C")
leaflet() %>% addTiles() %>% addCircles(data=houses_bogota)
### Usar la geometría de la ciudad
# crear sf_polygon de la ciudad Bogota
bogota_city <- getbb(place_name = "Bogota",
featuretype = "boundary:administrative",
format_out = "sf_polygon") %>% .$multipolygon
# graficar sf_polygon de la ciudad de Bogota sf_polygon
leaflet() %>% addTiles() %>% addPolygons(data=bogota_city)
# crear sf_polygon de la ciudad Medellin
medellin_city <- getbb(place_name = "Medellin",
featuretype = "boundary:administrative",
format_out = "sf_polygon") %>% .$multipolygon
# graficar sf_polygon de la ciudad de Bogota sf_polygon
leaflet() %>% addTiles() %>% addPolygons(data=medellin_city)
# crear sf_polygon de la ciudad Medellin
medellin_city <- getbb(place_name = "Medellin",
featuretype = "boundary:administrative",
format_out = "sf_polygon") %>% .$multipolygon
medellin_city
bogota_city
### Usar la geometría de la ciudad
# crear sf_polygon de la ciudad Bogota
bogota_city <- getbb(place_name = "Bogota",
featuretype = "boundary:administrative",
format_out = "sf_polygon") %>% .$multipolygon
# graficar sf_polygon de la ciudad de Bogota sf_polygon
leaflet() %>% addTiles() %>% addPolygons(data=bogota_city)
# crear sf_polygon de la ciudad Medellin
medellin_city <- getbb(place_name = "Medellin",
featuretype = "boundary:administrative",
format_out = "sf_polygon") %>% .$multipolygon
# crear sf_polygon de la ciudad Medellin
medellin_city <- getbb(place_name = "Medellin, Colombia",
featuretype = "boundary:administrative",
format_out = "sf_polygon") %>% .$multipolygon
medellin_city
# crear sf_polygon de la ciudad Medellin
medellin_city <- getbb(place_name = "Medellín, Colombia",
featuretype = "boundary:administrative",
format_out = "sf_polygon") %>% .$multipolygon
medellin_city
# graficar sf_polygon de la ciudad de Bogota sf_polygon
leaflet() %>% addTiles() %>% addPolygons(data=medellin_city)
# graficar sf_polygon de la ciudad de Bogota sf_polygon
leaflet() %>% addTiles() %>% addPolygons(data=bogota_city)
# crear sf_polygon de la ciudad Medellin
medellin_city <- getbb(place_name = "Medellín",
featuretype = "boundary:administrative",
format_out = "sf_polygon") %>% .$multipolygon
# graficar sf_polygon de la ciudad de Bogota sf_polygon
leaflet() %>% addTiles() %>% addPolygons(data=medellin_city)
## crear interseccion entre x base de casas sf, y sf_polygon
house_chapi <- st_intersection(x = houses_bogota , y = bogota_city)
# graficar sf_polygon de la interseccion entre ambos sf
leaflet() %>% addTiles() %>% addPolygons(data=bogota_city,col="red") %>% addCircles(data=house_chapi)
class(train_house)
# graficar casas de train-set
leaflet() %>% addTiles() %>% addCircleMarkers(data=train_house[1:10,])
## Help
vignette("sf3")
### **5.3 Afine transformations**
st_crs(train_house) == st_crs(parques)
# grafico casas Medellin
houses_medellin <- train_house %>% subset(city= "Medellin")
leaflet() %>% addTiles() %>% addCircles(data=houses_medellin)
# opcion 1: grafico general de casas de Bogota con filtro de variable city
houses_bogota <- train_house %>% subset(city= "Bogotá D.C")
houses_bogota
leaflet() %>% addTiles() %>% addCircles(data=houses_bogota)
### Usar la geometría de la ciudad
# crear sf_polygon de la ciudad Bogota
bogota_city <- getbb(place_name = "Bogota",
featuretype = "boundary:administrative",
format_out = "sf_polygon") %>% .$multipolygon
# graficar sf_polygon de la ciudad de Bogota sf_polygon
leaflet() %>% addTiles() %>% addPolygons(data=bogota_city)
# crear sf_polygon de la ciudad Medellin
medellin_city <- getbb(place_name = "Medellín",
featuretype = "boundary:administrative",
format_out = "sf_polygon") %>% .$multipolygon
bogota_city
medellin_city
View(train)
View(train_house)
# crear sf_polygon de la ciudad Medellin
medellin_city <- getbb(place_name = "Medellín",
featuretype = "boundary:administrative",
format_out = "sf_polygon") %>% .$multipolygon
# graficar sf_polygon de la ciudad de Bogota sf_polygon
leaflet() %>% addTiles() %>% addPolygons(data=medellin_city)
medellin_city
# graficar sf_polygon de la ciudad de Bogota sf_polygon
leaflet() %>% addTiles() %>% addPolygons(data=medellin_city)
# casas de Medellín
houses_medellin <- train_house %>% subset(city= "Medellín")
leaflet() %>% addTiles() %>% addCircles(data=houses_medellin)
# crear sf_polygon de la ciudad Medellin
medellin_city <- getbb(place_name = "Medellín",
featuretype = "boundary:administrative",
format_out = "sf_polygon") %>% .$multipolygon
medellin_city
## obtener la caja de coordenada que contiene el polígono de Bogotá, DC
opq(bbox = getbb("Bogotá Colombia"))
## obtener la caja de coordenada que contiene el polígono de Cali
opq(bbox = getbb("Cali Colombia"))
## obtener la caja de coordenada que contiene el polígono de Bogotá, DC
opq(bbox = getbb("Bogotá Colombia"))
amenities <- available_tags("amenity")
amenities
lista_amenities
# grafico casas Medellin
houses_medellin <- train_house %>% subset(city= "Medellin")
houses_medellin
View(houses_medellin)
View(houses_medellin)
# grafico casas Medellin
houses_medellin <- train_house %>% subset(city= "Medellin")
View(houses_medellin)
View(houses_medellin)
# opcion 1: grafico general de casas de Bogota con filtro de variable city
# casas de Bogota
houses_bogota <- train_house %>% subset(city= "Bogotá D.C")
leaflet() %>% addTiles() %>% addCircles(data=houses_bogota)
View(houses_bogota)
View(houses_bogota)
View(houses_bogota)
# opcion 1: grafico general de casas de Bogota con filtro de variable city
# casas de Bogota
houses_bogota <- train_house %>% subset(city= "Bogotá D.C")
leaflet() %>% addTiles() %>% addCircles(data=houses_bogota)
View(train_house)
# opcion 1: grafico general de casas de Bogota con filtro de variable city
# casas de Bogota
houses_bogota <- train_house %>% subset(city= "Bogotá D.C")
leaflet() %>% addTiles() %>% addCircles(data=houses_bogota)
# casas de Medellín
houses_medellin <- train_house %>% subset(city= "Medellín")
leaflet() %>% addTiles() %>% addCircles(data=houses_medellin)
## crear sf_polygon de las ciudades
# crear sf_polygon de la ciudad Bogota
bogota_city <- getbb(place_name = "Bogota",
featuretype = "boundary:administrative",
format_out = "sf_polygon") %>% .$multipolygon
# graficar sf_polygon de la ciudad de Bogota sf_polygon
leaflet() %>% addTiles() %>% addPolygons(data=bogota_city)
# crear sf_polygon de la ciudad Medellin
medellin_city <- getbb(place_name = "Medellín",
featuretype = "boundary:administrative",
format_out = "sf_polygon") %>% .$multipolygon
# crear sf_polygon de la ciudad Medellin
medellin_city <- getbb(place_name = "Medellín",
featuretype = "boundary:administrative",
format_out = "sf_polygon") %>% .$multipolygon
# graficar sf_polygon de la ciudad de Bogota sf_polygon
leaflet() %>% addTiles() %>% addPolygons(data=medellin_city)
# graficar sf_polygon de la ciudad de Bogota sf_polygon
leaflet() %>% addTiles() %>% addPolygons(data=medellin_city)
## crear interseccion entre x base de casas sf, y sf_polygon
house_chapi <- st_intersection(x = houses_bogota , y = bogota_city)
# graficar sf_polygon de la interseccion entre ambos sf
leaflet() %>% addTiles() %>% addPolygons(data=bogota_city,col="red") %>% addCircles(data=house_chapi)
#Crear objetos OSM para cada amenitie y extraer los Simple Features tipo Poligonos
#El loop crea un objeto OSM para cada amenitie y extrae los Simple Features
for (amenitie in lista_amenities) {
#Crear objetos osm
#assign(paste("osm", amenitie, sep = "_"), opq(bbox = getbb("Cali Colombia")) %>%
#        add_osm_feature(key="amenity" , value= amenitie))
## extraer Simple Features Collection (creando objetos sf)
#assign(paste("osm", amenitie, "sf", sep = "_"), opq(bbox = getbb("Cali Colombia")) %>%
#        add_osm_feature(key="amenity" , value= amenitie) %>% osmdata_sf())
#assign(paste("osm", amenitie, "sf", sep = "_"), opq(bbox = getbb("Cali Colombia")) %>%
#         add_osm_feature(key="amenity" , value= amenitie) %>% osmdata_sf() %>%
#         .$osm_polygons)
assign(paste("osm", amenitie,"Bogota" ,"sf", sep = "_"), opq(bbox = getbb("Bogotá Colombia")) %>%
add_osm_feature(key="amenity" , value= amenitie) %>% osmdata_sf() %>%
.$osm_polygons)
assign(paste("osm", amenitie,"Medellin" ,"sf", sep = "_"), opq(bbox = getbb("Medellín Colombia")) %>%
add_osm_feature(key="amenity" , value= amenitie) %>% osmdata_sf() %>%
.$osm_polygons)
}
